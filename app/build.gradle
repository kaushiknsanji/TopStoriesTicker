apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

// Load the credentials
def credPropertiesFile = rootProject.file("credentials.properties")
def credProperties = new Properties()
credProperties.load(new FileInputStream(credPropertiesFile))

android {
    // Constants defined for use with buildConfigField
    def STRING = "String"
    def GUARDIAN_API_KEY = "GUARDIAN_API_KEY"
    def GUARDIAN_API_KEY_VAL = '"' + credProperties['GUARDIAN_API_KEY_VAL'] + '"'
    def BASE_URL = "BASE_URL"
    def BASE_URL_VAL = '"' + "https://content.guardianapis.com" + '"'

    compileSdkVersion rootProject.ext.compile_sdk_version

    defaultConfig {
        applicationId "com.kaushiknsanji.topstoriesticker"
        minSdkVersion rootProject.ext.min_sdk_version
        targetSdkVersion rootProject.ext.target_sdk_version
        versionCode 1
        versionName "1.0"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            buildConfigField STRING, BASE_URL, BASE_URL_VAL
            buildConfigField STRING, GUARDIAN_API_KEY, GUARDIAN_API_KEY_VAL
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField STRING, BASE_URL, BASE_URL_VAL
            buildConfigField STRING, GUARDIAN_API_KEY, GUARDIAN_API_KEY_VAL
        }
    }

    // Using Java8
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    // JARs
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Kotlin Standard library
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    // Android Support library
    implementation "androidx.appcompat:appcompat:$app_compat_version"

    // Multidex
    implementation "androidx.multidex:multidex:$multidex_version"

    // Constraint Layout library
    implementation "androidx.constraintlayout:constraintlayout:$constraint_version"

    // Material Design
    implementation "com.google.android.material:material:$support_library_version"

    // RecyclerView
    implementation "androidx.recyclerview:recyclerview:$rv_version"

    // SwipeRefreshLayout
    implementation "androidx.swiperefreshlayout:swiperefreshlayout:$swipe_refresh_version"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // Dagger
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"

    // Image
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    // Networking
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.okhttp3:okhttp:$okhttp_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp_version"

    // Logger
    implementation "com.jakewharton.timber:timber:$timber_version"

    // JSON de/serializer using Gson
    implementation "com.google.code.gson:gson:$gson_version"

    testImplementation "junit:junit:$junit_version"
    androidTestImplementation "androidx.test.ext:junit:$core_testing_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$espresso_version"
}
